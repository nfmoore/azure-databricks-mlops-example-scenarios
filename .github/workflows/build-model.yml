name: Build Model

on:
  workflow_dispatch: # For demonstration purposes

  # push: # Runs workflow when you push a commit or tag
  #   branches:
  #     - main

  # schedule: # Runs workflow at a scheduled time.
  #   - cron: "0 0 * * 0"

jobs:
  create-model-staging:
    name: Create Model in Staging
    runs-on: ubuntu-latest

    environment:
      name: Staging

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Generate and save token
        run: |
          echo "DATABRICKS_TOKEN=$(curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
            https://login.microsoftonline.com/${{ secrets.AZURE_SP_TENANT_ID }}/oauth2/v2.0/token \
            -d 'client_id=${{ secrets.AZURE_SP_APPLICATION_ID }}' \
            -d 'grant_type=client_credentials' \
            -d 'scope=2ff814a6-3304-4ab8-85cb-cd0e6f879c1d%2F.default' \
            -d 'client_secret=${{ secrets.AZURE_SP_CLIENT_SECRET }}' |  jq -r  '.access_token')" >> $GITHUB_ENV

      - name: Trigger train model notebook
        id: train-model
        uses: databricks/run-notebook@v0
        with:
          databricks-host: https://adb-8818992417612582.2.azuredatabricks.net
          local-notebook-path: core/notebooks/train_model.py
          new-cluster-json: >
            {
              "num_workers": 1,
              "spark_version": "12.2.x-cpu-ml-scala2.12",
              "node_type_id": "Standard_DS3_v2"
            }
          access-control-list-json: >
            [
              {
                "group_name": "users",
                "permission_level": "CAN_VIEW"
              }
            ]

      - name: Notebook output
        run: |
          echo ${{ steps.train-model.outputs.notebook-output }}


      # - name: Tag and download model
      #   run: |
      #     MODEL_NAME=$(yq '.jobs.register_step.inputs.model_name' < core/pipelines/train_model.yml)
      #     MODEL_VERSION=$(az ml model list --name $MODEL_NAME --query "[0].version" | bc -l)

      #     az ml model update --name $MODEL_NAME --version $MODEL_VERSION \
      #       --set tags.github_run_id=${{ github.run_id }} tags.github_workflow_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      #     az ml model download --name $MODEL_NAME --version $MODEL_VERSION --download-path artifacts
      #     echo '{"model_name":"'"$MODEL_NAME"'","model_version":"'"$MODEL_VERSION"'"}' > artifacts/model.json

      # - name: Upload model artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: artifacts
      #     path: artifacts
